import javax.swing.*;
import java.util.*;
import java.awt.*;

/**
 * This class creates an
 *  image panel and handles all of the graphics stuff
 * @author Erik Miller
 * @author Jay Sathe
 * @author Tristan Seroff
 * @author Christian Ciabatoni
 */
public class ImagePanel extends JPanel
{
    private Image background; /** The background image*/
    private Image ground; /**The ground the tanks move on*/
    private ArrayList<MovingObject> movingObjects; /**The arraylist of objects
        that move and interact on the ground*/
    private int[] gHeight; /**The array of heights generated for the terrain*/
    private Tanks tanksGame;

    
    /**
     * The constructor for ImagePanel
     * @param img The background image
     * @param ground The image for a slice of ground
     * @param game Allows buttons in ImagePanel to interact with the game
     */
    public ImagePanel(String img, String ground, Tanks game)
    {
        this(new ImageIcon(img).getImage(), new ImageIcon(ground).getImage());
        tanksGame = game;
    }

    /**
     * The constructor for ImagePanel
     * @param img The background image
     * @param ground The image for a slice of ground
     */
    public ImagePanel(Image img, Image ground)
    {
        background = img;
        this.ground = ground;
        Dimension size = new Dimension(img.getWidth(null), img.getHeight(null));
        setPreferredSize(size);
        setMinimumSize(size);
        setMaximumSize(size);
        setSize(size);
        
        movingObjects = new ArrayList<MovingObject>();
        
        int gAmplitude = (int)(Math.random()*25)+100;
        int gPeriod = (int)(Math.random()*200)+100;
    	gHeight = new int[1024];
    	
    	if((int)System.currentTimeMillis()%2 == 1 )
    	{
    		for(int x = 0; x < 1024; x++)
    		{
    			gHeight[x] = (int)(gAmplitude * Math.sin((double)x / gPeriod)) + (2 * gAmplitude);
    		}
    	}
    	else
    	{
    		for(int x = 0; x < 1024; x++)
    		{
    			gHeight[x] = (int)(gAmplitude * Math.cos((double)x / gPeriod)) + (2 * gAmplitude);
    		}
    	}	

    }
    
    /**
     * Paints the object g
     * <br/>Precondition: g must be initialized
     * @param g Graphics
     */
    public void paintComponent(Graphics g)
    {
    	g.drawImage(background, 0, 0, null);
    	for(int x = 0; x < 1024; x++)
    	{
    		g.drawImage(ground, x, gHeight[x], null);
    	}
        for(MovingObject obj: movingObjects)
        {
            g.drawImage(obj.getImage(), (int)(obj.getX()), (int)(obj.getY()), null);
        }
        createHealth(tanksGame.getNumPlayers(), g);
    }
    
    /**
     * Creates a healthbar for each player in the game
     * @param numPlayers The total number of players
     * @param g Graphics
     */
    public void createHealth(int numPlayers, Graphics g)
    {
        if(numPlayers >= 0 && numPlayers <= 1)
            return;
        int width = background.getWidth(null);
    	
        g.setColor(Color.RED);
        g.fillRect(10, 20, 10, 50);
        g.fillRect(width - 20, 20, 10, 50);
        g.setColor(Color.GREEN);
	    g.fillRect(10, 20, 10, (int) (50 * tanksGame.getHealth(0)));
	    g.fillRect(width - 20,20, 10, (int) (50 * tanksGame.getHealth(numPlayers - 1)));
	    g.setColor(Color.BLACK);
	    g.drawString(tanksGame.getName(0), 10, 11);
	    g.drawString(tanksGame.getName(numPlayers - 1), width - 60, 11);
	    
    	if(numPlayers == 3)
    	{
            g.setColor(Color.RED);
            g.fillRect((width / 2) - 5, 20, 10, 50);
    		g.setColor(Color.GREEN);	
   	     	g.fillRect((width/2) - 5, 20, 10, (int) (50 * tanksGame.getHealth(1)));
   	     	g.setColor(Color.BLACK);
   	     	g.drawString(tanksGame.getName(1), (width / 2) - 5, 11);
    	}
    	else if(numPlayers == 4)
    	{
    	    g.setColor(Color.RED);
            g.fillRect((width / 3) - 5, 20, 10, 50);
            g.fillRect((2 * width / 3) - 5, 20, 10, 50);
            g.setColor(Color.GREEN);
   	     	g.fillRect((width / 3) - 5, 20, 10, (int) (50 * tanksGame.getHealth(1)));
   	     	g.fillRect((2 * width / 3) - 5, 20, 10, (int) (50 * tanksGame.getHealth(2)));
   	     	g.setColor(Color.BLACK);
	     	g.drawString(tanksGame.getName(1), (width / 3) - 5, 11);
	     	g.drawString(tanksGame.getName(2), (2 * width / 3) - 5, 11);
	     	
    	}
    }
    
    /**
     * Updates the image by repainting it
     * <br/>Precondition: updated must have been initialized
     * @param updated The arraylist of updated MovingObjects
     */
    public void updateImages(ArrayList<MovingObject> updated)
    {
        movingObjects = updated;
        repaint();
    }
    
    /**
     * Returns the array of heights for other classes to use
     * @return The array of heights generated by the funtion
     */
    public int[] getHeightArray()
    {
    	return gHeight;
    }
    
    /**
     * Makes an explosion crater (changes the height) with 
     * <code>damageRadius<code/> around the x-coordinate <code>bombCenter<code/>
     * @param bombCenter The x-coordinate of the explosion
     * @param damageRadius The radius of the explosion
     */
    public void changeHeight(int bombCenter, int damageRadius)
    {
        int bombY = gHeight[bombCenter];
        for(int x = bombCenter - damageRadius; x <= bombCenter + damageRadius; x++)
        {
            int heightToRemove = (int)(Math.sqrt(damageRadius*damageRadius - ((bombCenter - x)*(bombCenter - x))));
            if((x >= 0 && x < gHeight.length) && gHeight[x] < heightToRemove + bombY)
                gHeight[x] = heightToRemove + bombY;
        }
    }
}
